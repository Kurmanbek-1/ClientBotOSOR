from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from keyboards import buttons
from config import bot, Manager


# ======================================================================================================================
class OrderFSM(StatesGroup):
    full_name = State()
    articul = State()
    contact = State()
    size = State()
    submit = State()


async def order_FSM_start(message: types.Message):
    await OrderFSM.full_name.set()
    await message.answer("–í–∞—à–µ –§–ò–û ?!", reply_markup=buttons.cancel_markup)


async def load_fullname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["full_name"] = message.text
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞!')
    await OrderFSM.next()


async def load_articul(message: types.Message, state: FSMContext):
    # –í—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –æ–Ω
    async with state.proxy() as data:
        data["articule"] = message.text
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[
                                 [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                             ],
                             resize_keyboard=True
                         ))
    await OrderFSM.next()


async def load_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["contact"] = message.contact
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä!', reply_markup=buttons.cancel_markup)
    await OrderFSM.next()


async def load_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await message.answer(f"–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                         f"–í–∞—à–µ –§–ò–û: {data['full_name']}"
                         f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {data['articule']}\n"
                         f"–†–∞–∑–º–µ—Ä: {data['size']}")
    await message.answer("–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=buttons.submit_markup)
    await OrderFSM.next()


async def load_submit(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        for i in Manager:
            if message.text.lower() == '–¥–∞':
                await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n'
                                     '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã')

                await bot.send_message(chat_id=i, text=f"üìå–ë—Ä–æ–Ω—å:\n"
                                                       f"–§–ò–û: {data['full_name']}\n"
                                                       f"–ê—Ç–∏–∫—É–ª: {data['articule']}\n"
                                                       f"–†–∞–∑–º–µ—Ä: {data['size']}\n"
                                                       f"\n\n"
                                                       f"–°–Ω–∏–∑—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ ‚¨áÔ∏è")
                await bot.send_contact(chat_id=i,
                                       phone_number=data['contact']['phone_number'],
                                       first_name=data['contact']['first_name'])
                await state.finish()

            else:
                await message.answer("–û—Ç–º–µ–Ω–∞!")
                await state.finish()

    # –í—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.answer('–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=buttons.start)


def register_reservation(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, Text(equals='/cancel', ignore_case=True), state='*')
    dp.register_message_handler(order_FSM_start, commands=['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'])
    dp.register_message_handler(load_fullname, state=OrderFSM.full_name)
    dp.register_message_handler(load_articul, state=OrderFSM.articul)
    dp.register_message_handler(load_contact, state=OrderFSM.contact, content_types=['contact'])
    dp.register_message_handler(load_size, state=OrderFSM.size)
    dp.register_message_handler(load_submit, state=OrderFSM.submit)
